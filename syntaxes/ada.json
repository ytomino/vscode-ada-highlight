{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ada",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#withClauses"
		},
		{
			"include": "#genericFormalPart"
		},
		{
			"include": "#raiseStatements"
		},
		{
			"include": "#requeueStatements"
		},
		{
			"include": "#pragmas"
		},
		{
			"include": "#attributes"
		},
		{
			"include": "#aspects"
		},
		{
			"include": "#labels"
		},
		{
			"include": "#parenthesis"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#delimiter"
		},
		{
			"include": "#reservedWord"
		}
	],
	"repository": {
		"comments": {
			"name": "comment.line.double-dash.ada",
			"begin": "--",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.ada"
				}
			},
			"end": "$",
			"patterns": []
		},
		"withClauses": {
			"begin": "^(limited\\s+)?(private\\s+)?with\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.ada"
				}
			},
			"end": ";",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.ada"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#attributes"
				},
				{
					"include": "#parenthesis"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#delimiter"
				},
				{
					"include": "#reservedWord"
				}
			]
		},
		"genericFormalPart": {
			"begin": "\\bgeneric\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.ada"
				}
			},
			"end": "(?=\\b(function|package|procedure)\\b)",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "\\b(with|type)\\b|(:)(?!=)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.ada"
						},
						"2": {
							"name": "keyword.operator.ada"
						}
					},
					"end": ";",
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ada"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#aspects"
						},
						{
							"include": "#attributes"
						},
						{
							"include": "#parenthesis"
						},
						{
							"include": "#literals"
						},
						{
							"include": "#delimiter"
						},
						{
							"include": "#reservedWord"
						}
					]
				},
				{
					"include": "#attributes"
				},
				{
					"include": "#parenthesis"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#delimiter"
				},
				{
					"include": "#reservedWord"
				}
			]
		},
		"raiseStatements": {
			"begin": "\\braise\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.ada"
				}
			},
			"end": ";",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.ada"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#attributes"
				},
				{
					"include": "#parenthesis"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#delimiter"
				},
				{
					"include": "#reservedWord"
				}
			]
		},
		"requeueStatements": {
			"begin": "\\brequeue\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.ada"
				}
			},
			"end": ";",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.ada"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#attributes"
				},
				{
					"include": "#parenthesis"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#delimiter"
				},
				{
					"include": "#reservedWord"
				}
			]
		},
		"pragmas": {
			"begin": "\\bpragma\\b",
			"beginCaptures": {
				"0": {
					"name": "meta.ada"
				}
			},
			"end": "(?=[;(])",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"name": "entity.other.attribute-name.ada",
					"match": "\\b((All_Calls_Remote|Assert|Assertion_Policy|Asynchronous|Atomic|Atomic_Components|Attach_Handler|Convention|CPU|Default_Storage_Pool|Detect_Blocking|Discard_Names|Dispatching_Domain|Elaborate|Elaborate_All|Elaborate_Body|Export|Import|Independent|Independent_Components|Inline|Inspection_Point|Interrupt_Handler|Interrupt_Priority|Linker_Options|List|Locking_Policy|No_Return|Normalize_Scalars|Optimize|Pack|Page|Partition_Elaboration_Policy|Preelaborable_Initialization|Preelaborate|Priority|Priority_Specific_Dispatching|Profile|Pure|Queuing_Policy|Relative_Deadline|Remote_Call_Interface|Remote_Types|Restrictions|Reviewable|Shared_Passive|Storage_Size|Suppress|Task_Dispatching_Policy|Unchecked_Union|Unsuppress|Volatile|Volatile_Components)|([A-Za-z_][A-Za-z_0-9]*))\\b",
					"captures": {
						"2": {
							"name": "entity.other.attribute-name.defined.ada"
						}
					}
				}
			]
		},
		"attributes": {
			"patterns": [{
				"name": "entity.other.attribute-name.ada",
				"match": "(('(Access|Address|Adjacent|Aft|Alignment|Base|Bit_Order|Body_Version|Callable|Caller|Ceiling|Class|Component_Size|Compose|Constrained|Copy_Sign|Count|Definite|Delta|Denorm|Digits|Exponent|External_Tag|First|First_Bit|First_Valid|Floor|Fore|Fraction|Has_Same_Storage|Identity|Image|Index|Input|Last|Last_Bit|Last_Valid|Leading_Part|Length|Machine|Machine_Emax|Machine_Emin|Machine_Mantissa|Machine_Overflows|Machine_Radix|Machine_Rounding|Machine_Rounds|Max|Max_Alignment_For_Allocation|Max_Size_In_Storage_Elements|Min|Mod|Model|Model_Emin|Model_Epsilon|Model_Mantissa|Model_Small|Modulus|Nonblocking|Object_Size|Old|Output|Overlaps_Storage|Partition_Id|Pos|Position|Pred|Priority|Range|Read|Remainder|Result|Round|Rounding|Safe_First|Safe_Last|Scale|Scaling|Signed_Zeros|Size|Small|Storage_Pool|Storage_Size|Stream_Size|Succ|Tag|Terminated|Truncation|Unbiased_Rounding|Unchecked_Access|Val|Valid|Value|Version|Wide_Image|Wide_Value|Wide_Wide_Image|Wide_Wide_Value|Wide_Wide_Width|Wide_Width|Width|Write))|'[A-Za-z][A-Za-z_0-9]+)\\b",
				"captures": {
					"2": {
						"name": "entity.other.attribute-name.defined.ada"
					}
				}
			}]
		},
		"aspects": {
			"begin": "(?!^)\\b(with)\\b",
			"beginCaptures": {
				"1": {
					"name": "meta.ada"
				}
			},
			"end": "(?=;|\\b(entry|function|is|not|null|overriding|package|pragma|private|procedure|record|type)\\b)",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"name": "entity.other.attribute-name.ada",
					"match": "\\b((Address|Alignment|All_Calls_Remote|Asynchronous|Atomic|Atomic_Components|Attach_Handler|Bit_Order|Coding|Component_Size|Constant_Indexing|Convention|CPU|Default_Component_Value|Default_Iterator|Default_Storage_Pool|Default_Value|Discard_Names|Dispatching_Domain|Dynamic_Predicate|Elaborate_Body|Exclusive_Functions|Export|External_Name|External_Tag|Implicit_Dereference|Import|Independent|Independent_Components|Inline|Input('Class)?|Interrupt_Handler|Interrupt_Priority|Iterator_Element|Link_Name|Machine_Radix|Max_Entry_Queue_Length|No_Return|Nonblocking|Output('Class)?|Pack|Post('Class)?|Pre('Class)?|Predicate_Failure|Preelaborate|Priority|Pure|Read('Class)?|Relative_Deadline|Remote_Call_Interface|Remote_Types|Shared_Passive|Size|Small|Stable_Properties('Class)?|Static_Predicate|Storage_Pool|Storage_Size|Stream_Size|Synchronization|Type_Invariant('Class)?|Unchecked_Union|Variable_Indexing|Volatile|Volatile_Components|Write('Class)?)|[A-Za-z][A-Za-z_0-9]*)\\b",
					"captures": {
						"2": {
							"name": "entity.other.attribute-name.defined.ada"
						}
					}
				},
				{
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ada"
						}
					},
					"end": "(?=[,;]|\\bis\\b)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#attributes"
						},
						{
							"include": "#parenthesis"
						},
						{
							"include": "#literals"
						},
						{
							"include": "#delimiter"
						},
						{
							"include": "#reservedWord"
						}
					]
				}
			]
		},
		"labels": {
			"name": "keyword.operator.ada",
			"contentName": "entity.name.selector.ada",
			"begin": "<<",
			"end": ">>",
			"patterns": []
		},
		"parenthesis": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.ada"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.ada"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#attributes"
				},
				{
					"include": "#parenthesis"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#delimiter"
				},
				{
					"include": "#reservedWord"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.numeric.ada",
					"match": "\\b\\d[[:digit:]_]*((\\.[[:digit:]_]+|#[[:xdigit:]_]+(\\.[[:xdigit:]_]+)?#)([eE][+\\-]?[[:digit:]_]+)?)?"
				},
				{
					"name": "string.quoted.single.ada",
					"match": "\\'.\\'"
				},
				{
					"name": "string.quoted.double.ada",
					"begin": "\"",
					"end": "\"(?!\")",
					"patterns": [{
						"name": "constant.character.escape.ada",
						"match": "\"\""
					}]
				},
				{
					"name": "string.quoted.other.ada",
					"begin": "%",
					"end": "%(?!%)",
					"patterns": [{
						"name": "constant.character.escape.ada",
						"match": "%%"
					}]
				}
			]
		},
		"delimiter": {
			"patterns": [{
				"name": "keyword.operator.ada",
				"match": "&|\\*\\*?|\\+|,|-|\\.\\.?|/=?|:=?|;|<[<=>]?|=>?|>[=>]?|@|\\|"
			}]
		},
		"reservedWord": {
			"patterns": [{
				"name": "keyword.control.ada",
				"match": "\\b(abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|or|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|return|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b"
			}]
		}
	},
	"scopeName": "source.ada"
}
